import pygame, sys, random
from pygame.locals import *
from sys import exit

#GLOBAL VARIABLES
#setting dimensions of our games window and creating user variable needed
WINDOWWIDTH = 520
WINDOWHEIGHT = 570
windowSurface = pygame.display.set_mode((WINDOWWIDTH, WINDOWHEIGHT), 0, 32)

#specifying colors(uses R,G,B)
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
SILVER = (192, 192, 192)
GREEN = (0, 128, 0)
YELLOW = (255, 255, 0)

#making a 2D array that is 4 columns by 4 rows (look up Comprehension in python)
myArray = [[0 for j in range(4)] for i in range(4)]
X = 20; Y = 20; incr = 1

#integer for storing score
score = 0

#create clock object
timer = pygame.time.Clock()
FrameRate = 60
FrameCount = 0

#loading 2D array with our rectangle objects so they can be easily rendered later
for i in range(len(myArray)):
    for j in range(len(myArray)):
        if(incr == 5):
            incr = 1
            Y += 125
            X = 20

        myArray[i][j] = pygame.Rect(X, Y, 100, 100)
        X += 125
        incr += 1


def Menu():
    windowSurface.fill(BLACK)
    #making special font for Menu use
    MenuFont = pygame.font.SysFont("timesnewromanms", 36)
    
    MenuBlocks = []
    MenuText = []
    MenuText.append(MenuFont.render("Start Game", True, GREEN))#centerx - 70, centery - 10
    MenuText.append(MenuFont.render("Rules", True, GREEN))#centerx - 40, centery - 10
    MenuText.append(MenuFont.render("Exit", True, GREEN))

    MenuBlocks.append(pygame.Rect(110, 60, 300, 100))
    MenuBlocks.append(pygame.Rect(110, 210, 300, 100))
    MenuBlocks.append(pygame.Rect(110, 360, 300, 100))
    for i in range(len(MenuBlocks)):
        #handles centering the different length text objects
        if i == 0:
            x = 70
        elif i == 1:
            x = 40
        else:
            x = 30
        pygame.draw.rect(windowSurface, WHITE, MenuBlocks[i])
        windowSurface.blit(MenuText[i], (MenuBlocks[i].centerx - x, MenuBlocks[i].centery - 10))
    
    #updates our game window with w/e changes have been made (emulates motion that we see)
    pygame.display.update()

    while True:
        for event in pygame.event.get():
            if event.type == MOUSEBUTTONDOWN:
                if((event.pos[0] > MenuBlocks[0].left) and (event.pos[0] < MenuBlocks[0].right) and ( event.pos[1] > \
                    MenuBlocks[0].top) and (event.pos[1] < MenuBlocks[0].bottom)):
                    GameWindow(myArray)
                elif((event.pos[0] > MenuBlocks[1].left) and (event.pos[0] < MenuBlocks[1].right) and ( event.pos[1] > \
                    MenuBlocks[1].top) and (event.pos[1] < MenuBlocks[1].bottom)):
                    RuleWindow()
                elif((event.pos[0] > MenuBlocks[2].left) and (event.pos[0] < MenuBlocks[2].right) and ( event.pos[1] > \
                    MenuBlocks[2].top) and (event.pos[1] < MenuBlocks[2].bottom)):
                    pygame.quit()
                    exit(0)

def RuleWindow():
    windowSurface.fill(BLACK)

    RuleFont = pygame.font.SysFont("arialblackms", 22)
    ReturnFont = pygame.font.SysFont("arialblackms", 36)
    
    RuleList = []
    RuleList.append(RuleFont.render("-Try to get the highest score possible in 1 minute", True, WHITE))
    RuleList.append(RuleFont.render(" by shifting the puzzle", True, WHITE))
    RuleList.append(RuleFont.render("-You can shift the puzzle Left, Right, Up, or Down", True, WHITE))
    RuleList.append(RuleFont.render(" by using the arrow keys", True, WHITE))
    RuleList.append(RuleFont.render("-When shifted all tiles try to move as far in the specified", True, WHITE))
    RuleList.append(RuleFont.render(" direction as possible", True, WHITE))
    RuleList.append(RuleFont.render("-When two tiles of the same integer meet they Combine together", True, WHITE))
    RuleList.append(RuleFont.render(" and form the sum of the like tiles in the direction you were", True, WHITE))
    RuleList.append(RuleFont.render(" shifting the table. Ex 2,2 would turn into one 4 tile ", True, WHITE))
    RuleList.append(RuleFont.render("-Forming tiles with larger integers gives you more points", True, WHITE))
    RuleList.append(RuleFont.render(" I.E. making an 8 gives more points than making a 4", True, WHITE))
    
    #render rules onto display
    for i in range(len(RuleList)):
        windowSurface.blit(RuleList[i], (40,(i + 1)*40))
    
    #create box to return to main menu
    ReturnBlck = pygame.Rect( 380, 470, 120, 50)
    ReturnText = ReturnFont.render("Return", True, GREEN)
    pygame.draw.rect(windowSurface, WHITE,ReturnBlck)
    windowSurface.blit(ReturnText,(ReturnBlck.centerx - 40, ReturnBlck.centery - 12))
    pygame.display.update()
    while True:
        for event in pygame.event.get():
            if event.type == MOUSEBUTTONDOWN:
                if ((event.pos[0] > ReturnBlck.left) and (event.pos[0] < ReturnBlck.right) and \
                    ( event.pos[1] > ReturnBlck.top) and (event.pos[1] < ReturnBlck.bottom)):
                    Menu()
    return

def GameOver():
    #handles when timer runs out
    
    global score

    windowSurface.fill(BLACK)

    GameFont = pygame.font.Font(None, 30)

    GameOverString = "GAME OVER"
    GameOverText = GameFont.render(GameOverString, True, SILVER)

    ScoreString = "Final Score: {0:01}".format(score)
    ScoreText = GameFont.render(ScoreString, True, SILVER)

    ScoreLen = len(str(score))

    windowSurface.blit(GameOverText, (180, 250))
    windowSurface.blit(ScoreText, ((180 - (ScoreLen * 5), 300)))

    #display option to return to game/quit
    MenuOption = pygame.Rect(135, 450, 110, 50)
    QuitOption = pygame.Rect(265, 450, 110, 50)
    MenuText = GameFont.render("Menu", True, GREEN)
    QuitText = GameFont.render("Quit", True, GREEN)

    pygame.draw.rect(windowSurface, WHITE, MenuOption)
    windowSurface.blit(MenuText, (MenuOption.centerx - 40, MenuOption.centery - 12))
    pygame.draw.rect(windowSurface, WHITE, QuitOption)
    windowSurface.blit(QuitText, (QuitOption.centerx - 40, QuitOption.centery - 12))
    
    pygame.display.update()
    while True:
        for event in pygame.event.get():
            if event.type == MOUSEBUTTONDOWN:
                if ((event.pos[0] > MenuOption.left) and (event.pos[0] < MenuOption.right) and \
                    (event.pos[1] > MenuOption.top) and (event.pos[1] < MenuOption.bottom)):
                    Menu()
                elif ((event.pos[0] > QuitOption.left) and (event.pos[0] < QuitOption.right) and \
                    (event.pos[1] > QuitOption.top) and (event.pos[1] < QuitOption.bottom)):
                    pygame.quit()
                    exit(0)

def GameWindow(RectList):

    #1 minute timer
    StartTime = 60

    GameClock = pygame.time.Clock()
    
    #font object must be specified to be able to use text
    GameFont = pygame.font.Font(None, 30)
    
    GameArray = [[0 for j in range(4)] for i in range(4)]
    for i in range(len(GameArray)):
        for j in range(len(GameArray)):
            GameArray[i][j] = 0

    GameArray[random.randint(0,3)][random.randint(0,3)] = 2
    global score
    score = 0

    global FrameCount
    FrameCount = 0

    while True:

        GameClock.tick(FrameRate)

        ScoreString = "Score: {0:01}".format(score)

        #Determine clock variables
        TotalSeconds = StartTime - int(FrameCount // FrameRate)
        if TotalSeconds < 0:
            TotalSeconds = 0
        Minutes = TotalSeconds // 60
        Seconds = TotalSeconds % 60


        TimerString = "Time remaining: {0:02}:{1:02}".format(Minutes, Seconds)
        TimerText = GameFont.render(TimerString, True, SILVER)

        #Set up variables to shift table
        ShiftLeft = False
        ShiftRight = False
        ShiftUp = False
        ShiftDown = False

        windowSurface.fill(BLACK)
        #drawing the Rect objects i just created
        #color changing based on value
        for i in range(len(RectList)):
            for j in range(len(RectList)):
                random.seed()
                if GameArray[i][j]==0:
                    pygame.draw.rect(windowSurface, BLACK, RectList[i][j])
                    
                elif GameArray[i][j]==2:
                    pygame.draw.rect(windowSurface, (SILVER), RectList[i][j])                    
                    
                elif GameArray[i][j]==2**2:
                    pygame.draw.rect(windowSurface, (192+5,192+5,192-17), RectList[i][j])                    
                    
                elif GameArray[i][j]==2**3:
                    pygame.draw.rect(windowSurface, (192+5*2,192+5*2,192-17*2), RectList[i][j])                    
                    
                elif GameArray[i][j]==2**4:
                    pygame.draw.rect(windowSurface, (192+5*3,192+5*3,192-17*3), RectList[i][j])                    
                    
                elif GameArray[i][j]==2**5:
                    pygame.draw.rect(windowSurface, (192+5*4,192+5*4,192-17*4), RectList[i][j])
                                        
                elif GameArray[i][j]==2**6:
                    pygame.draw.rect(windowSurface, (192+5*5,192+5*5,192-17*5), RectList[i][j]) 
                                       
                elif GameArray[i][j]==2**7:
                    pygame.draw.rect(windowSurface, (192+5*6,192+5*6,192-17*6), RectList[i][j]) 
                                       
                elif GameArray[i][j]==2**8:
                    pygame.draw.rect(windowSurface, (192+5*7,192+5*7,192-17*7), RectList[i][j])                    
                    
                elif GameArray[i][j]==2**9:
                    pygame.draw.rect(windowSurface, (192+5*8,192+5*8,192-17*8), RectList[i][j])                    
                   
                elif GameArray[i][j]==2**10:
                    pygame.draw.rect(windowSurface, (192+5*9,192+5*9,192-17*9), RectList[i][j])                    
                    
                elif GameArray[i][j]==2**11:
                    pygame.draw.rect(windowSurface, (39,161,161), RectList[i][j])                    
                    
                elif GameArray[i][j]==2**12:
                    pygame.draw.rect(windowSurface, (255,163,3), RectList[i][j])                    
                   
                else:                    
                    pygame.draw.rect(windowSurface, WHITE, RectList[i][j])   
                
                #tile border    
                if Seconds>10:
                    pygame.draw.rect(windowSurface, (162,62,152), RectList[i][j], 7)
                elif Seconds==0:                    
                    pygame.draw.rect(windowSurface, GREEN, RectList[i][j], 7)
                elif Seconds<10:
                    pygame.draw.rect(windowSurface, (255,0,0), RectList[i][j], 7)

                                     
                    
                if GameArray[i][j] == 0:
                    text = GameFont.render(" ", True, GREEN)
                else:
                    text = GameFont.render(str(GameArray[i][j]), True, GREEN)


                #Centered tile values based on length
                if GameArray[i][j] <100:
                    windowSurface.blit(text, (RectList[i][j].centerx - 8, RectList[i][j].centery - 10))
                elif GameArray[i][j] < 1000:
                    windowSurface.blit(text, (RectList[i][j].centerx - 20, RectList[i][j].centery - 10))
                else:
                    windowSurface.blit(text, (RectList[i][j].centerx - 25, RectList[i][j].centery - 10))
 
        
        ScoreText = GameFont.render(ScoreString, True, SILVER)
        windowSurface.blit(ScoreText, (25, 515))
        windowSurface.blit(TimerText, (275, 515))

        FrameCount += 1
        pygame.display.update()

        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                exit(0)
            if event.type == KEYDOWN:
                if event.key == K_ESCAPE:
                    pygame.quit()
                    exit(0)
                if event.key == K_LEFT:
                    ShiftLeft = True
                    ShiftRight = False
                if event.key == K_RIGHT:
                    ShiftLeft = False
                    ShiftRight = True
                if event.key == K_UP:
                    ShiftUp = True
                    ShiftDown = False
                if event.key == K_DOWN:
                    ShiftUp = False
                    ShiftDown = True
            if event.type == KEYUP:
                if event.key == K_ESCAPE:
                    pygame.quit()
                    exit(0)
                if event.key == K_LEFT:
                    ShiftLeft = False
                if event.key == K_RIGHT:
                    ShiftRight = False
                if event.key == K_UP:
                    ShiftUp = False
                if event.key == K_DOWN:
                    ShiftDown = False
                
        if GameLogic(ShiftLeft, ShiftRight, ShiftUp, ShiftDown, GameArray):
            #Make interface to handle game over
            GameOver()
        if TotalSeconds == 0:
            GameOver()
            break

    return

def Check(Array, Movement):
    GameOver = True

    for i in range(len(Array)):
        for j in range(len(Array)):
            if j - 1 >= 0 and (Array[i][j] == Array[i][j - 1] or Array[i][j - 1] == 0):
                GameOver = False
            elif j + 1 <= 3 and (Array[i][j] == Array[i][j + 1] or Array[i][j + 1] == 0):
                GameOver = False
            elif i - 1 >= 0 and (Array[i][j] == Array[i - 1][j] or Array[i - 1][j] == 0):
                GameOver = False
            elif i + 1 <= 3 and (Array[i][j] == Array[i + 1][j] or Array[i + 1][j] == 0):
                GameOver = False
                
    if GameOver and (not Movement):
        return True

    return False



def GameLogic(Left, Right, Up, Down, NumArray):
    Row = Col = 0
    Spawned = False
    Moved = False
    global score

    #Left Shift
    if Left:
        for i in range(4):
            for j in range(4):
                Col = j
                while((Col - 1) >= 0)and NumArray[i][Col - 1] == 0 and NumArray[i][Col] != 0:
                    Moved = True
                    NumArray[i][Col - 1] = NumArray[i][Col]
                    NumArray[i][Col] = 0
                    Col -= 1
        for i in range(4):
            for j in range(4):
                if j <= 2 and NumArray[i][j] == NumArray[i][j + 1] and NumArray[i][j] != 0:
                    Moved = True
                    NumArray[i][j] *= 2
                    NumArray[i][j + 1] = 0
                    score += NumArray[i][j]
        for i in range(4):
            for j in range(4):
                Col = j
                while((Col - 1) >= 0)and NumArray[i][Col - 1] == 0:
                    NumArray[i][Col - 1] = NumArray[i][Col]
                    NumArray[i][Col] = 0
                    Col -= 1
        if Moved:
            while not Spawned:
                rand = random.randint(0,3)
                if NumArray[rand][3] == 0:
                    NumArray[rand][3] = 2
                    Spawned = True
    #Right Shift
    elif Right:
        for i in range(4):
            for j in range(3, -1, -1):
                Col = j
                while((Col + 1) <= 3)and NumArray[i][Col + 1] == 0 and NumArray[i][Col] != 0:
                    Moved = True
                    NumArray[i][Col + 1] = NumArray[i][Col]
                    NumArray[i][Col] = 0
                    Col += 1
        for i in range(4):
            for j in range(3, -1, -1):
                if j >= 1 and NumArray[i][j] == NumArray[i][j - 1] and NumArray[i][j] != 0:
                    Moved = True
                    NumArray[i][j] *= 2
                    NumArray[i][j - 1] = 0
                    score += NumArray[i][j]
        for i in range(4):
            for j in range(4):
                Col = j
                while((Col - 1) >= 0)and NumArray[i][Col] == 0:
                    NumArray[i][Col] = NumArray[i][Col - 1]
                    NumArray[i][Col - 1] = 0
                    Col -= 1
        if Moved:
            while not Spawned:
                rand = random.randint(0,3)
                if NumArray[rand][0] == 0:
                    NumArray[rand][0] = 2
                    Spawned = True
    #Upward Shift
    elif Up:
        for i in range(4):
            for j in range(4):
                Row = i
                while((Row - 1) >= 0)and NumArray[Row - 1][j] == 0 and NumArray[Row][j] != 0:
                    Moved = True
                    NumArray[Row - 1][j] = NumArray[Row][j]
                    NumArray[Row][j] = 0
                    Row -= 1
        for i in range(4):
            for j in range(4):
                if i <= 2 and NumArray[i][j] == NumArray[i + 1][j] and NumArray[i][j] != 0:
                    Moved = True
                    NumArray[i][j] *= 2
                    NumArray[i + 1][j] = 0
                    score += NumArray[i][j]
        for i in range(4):
            for j in range(4):
                Row = i
                while((Row - 1) >= 0)and NumArray[Row - 1][j] == 0:
                    NumArray[Row - 1][j] = NumArray[Row][j]
                    NumArray[Row][j] = 0
                    Row -= 1
        incr = 0; incr += 1
        if Moved:
            while not Spawned:
                rand = random.randint(0,3)
                if NumArray[3][rand] == 0:
                    NumArray[3][rand] = 2
                    Spawned = True
    #Downward Shift
    elif Down:
        for i in range(3, -1, -1):
            for j in range(4):
                Row = i
                while((Row + 1) <= 3)and NumArray[Row + 1][j] == 0 and NumArray[Row][j] != 0:
                    Moved = True
                    NumArray[Row + 1][j] = NumArray[Row][j]
                    NumArray[Row][j] = 0
                    Row += 1
        for i in range(3, -1, -1):
            for j in range(4):
                if i >= 1 and NumArray[i][j] == NumArray[i - 1][j] and NumArray[i][j] != 0:
                    Moved = True
                    NumArray[i][j] *= 2
                    NumArray[i - 1][j] = 0
                    score += NumArray[i][j]
        for i in range(4):
            for j in range(4):
                Row = i
                while((Row - 1) >= 0)and NumArray[Row][j] == 0 and NumArray[Row - 1][j] != 0:
                    NumArray[Row][j] = NumArray[Row - 1][j]
                    NumArray[Row - 1][j] = 0
                    Row -= 1
        
        #Spawns new integer IF movement occurred
        if Moved:
            while not Spawned:
                rand = random.randint(0,3)
                if NumArray[0][rand] == 0:
                    NumArray[0][rand] = 2
                    Spawned = True
                   
    return Check(NumArray, Moved)

def main():
    pygame.init() #required

    global FrameRate
    global FrameCount

    mainClock = pygame.time.Clock() #used to set speed at which window updates

    #set's title of window that opens up for your game
    pygame.display.set_caption("Tile Game")
    
    #mainClock is a user defined variable, this function call slows down the program so
    #game screen updates at a slower speed for the player
    mainClock.tick(FrameRate)
    Menu()
    
    exit(0)

if __name__ == "__main__":
    main()
